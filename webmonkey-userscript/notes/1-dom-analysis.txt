--------------------------------------------------------------------------------

https://v2.apimdb.net/e/tv/tt0115355/8/1/

--------------------------------------------------------------------------------
// view-source:https://dood.watch/d/f9nizwztt5h1

<iframe src="/e/f9nizwztt5h1" scrolling="no" frameborder="0" allowfullscreen="true"></iframe>

--------------------------------------------------------------------------------
// view-source:https://dood.watch/e/f9nizwztt5h1

<script>
  $.get(
    '/pass_md5/34659194-71-38-1641048894-d38565149c4ed278eb78092ae48ca975/qdz8iad85xyfjhhpbkxdnpca',
    function(data){
      dpload(data);
      dsplayer.src({type: "video/mp4",src: data + makePlay()});
    }
  )

  function makePlay(){
    for(var a="",t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",n=t.length,o=0;10>o;o++)
      a+=t.charAt(Math.floor(Math.random()*n));

    return a+"?token=qdz8iad85xyfjhhpbkxdnpca&expiry="+Date.now();
  };
</script>

----------------------------------------

on page:
  https://dood.watch/d/f9nizwztt5h1

console:
  fetch('/pass_md5/34659194-71-38-1641048894-d38565149c4ed278eb78092ae48ca975/qdz8iad85xyfjhhpbkxdnpca').then(r => r.text()).then(console.log)
result:
  'https://rus174q.dood.video/u5kj2b5vddglsdgge7owiiqoccub3epmpxghbfqwm4hj7csohfvnuysrvdwq/dl2nbxqop7~'

console:
  var mp4_url = 'https://rus174q.dood.video/u5kj2b5vddglsdgge7owiiqoccub3epmpxghbfqwm4hj7csohfvnuysrvdwq/dl2nbxqop7~'
    + 'XXXXXXXXXX'
    + '?token=qdz8iad85xyfjhhpbkxdnpca&expiry=' + Date.now()

  document.querySelector('iframe').src = mp4_url
result:
  the mp4 video plays inside the iframe

--------------------------------------------------------------------------------

observations:
  * mp4_url
    - uses HTTPS: protocol
    - does not require a "Referer" request header
      * plays directly on Chromecast

real-world problem:
  * on an older Android device (tested w/ 4.4 KitKat)..
    - the HTTPS: URL results in a failed TLS handshake
      * which doesn't make any sense to me, because
        - ExoAirPlayer is configured to trust all SSL/TLS certificates.. regardless of CA
        - ExoAirPlayer is configured to enable TLS 1.2 on Android 4.x devices,
          and the host supports TLS 1.2
    - interestingly..
      * if mp4_url is modified to use HTTP: protocol
        - the host performs a 302 redirect, back to an HTTPS: URL
        - ExoAirPlayer successfully plays the video

real-world complication:
  * it would be tempting to always modify mp4_url to use HTTP: protocol
    - however, Chromecast isn't able to play the video when this redirect is used
    - interestingly..
      * `curl -L` can only follow the redirect
        when both "Referer" and "Origin" request headers are included
      * which explains why ExoAirPlayer succeeds where Chromecast fails

--------------------------------------------------------------------------------
